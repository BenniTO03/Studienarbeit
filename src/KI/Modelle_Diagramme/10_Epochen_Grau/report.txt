[INFO] training the network...
Epoch [0], train_loss: 2.9607, train_acc: 0.0876, val_loss: 2.7217, val_acc: 0.1372
Epoch [1], train_loss: 2.6102, train_acc: 0.1494, val_loss: 2.5679, val_acc: 0.1696
Epoch [2], train_loss: 2.3293, train_acc: 0.2447, val_loss: 2.1482, val_acc: 0.3013
Epoch [3], train_loss: 1.7327, train_acc: 0.4370, val_loss: 1.4958, val_acc: 0.5244
Epoch [4], train_loss: 1.2997, train_acc: 0.5849, val_loss: 1.1744, val_acc: 0.6394
Epoch [5], train_loss: 1.0369, train_acc: 0.6710, val_loss: 0.9501, val_acc: 0.7115
Epoch [6], train_loss: 0.8228, train_acc: 0.7424, val_loss: 0.8038, val_acc: 0.7515
Epoch [7], train_loss: 0.6904, train_acc: 0.7842, val_loss: 0.6960, val_acc: 0.7906
Epoch [8], train_loss: 0.5869, train_acc: 0.8174, val_loss: 0.6786, val_acc: 0.8002
Epoch [9], train_loss: 0.5012, train_acc: 0.8397, val_loss: 0.6236, val_acc: 0.8173
[INFO] total time taken to train the model: 72.29min

NaturalSceneClassification(
  (network): Sequential(
    (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): ReLU()
    (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (3): ReLU()
    (4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (5): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (6): ReLU()
    (7): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): ReLU()
    (9): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (10): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): ReLU()
    (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (13): ReLU()
    (14): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (15): Flatten(start_dim=1, end_dim=-1)
    (16): Linear(in_features=16384, out_features=1024, bias=True)
    (17): ReLU()
    (18): Linear(in_features=1024, out_features=512, bias=True)
    (19): ReLU()
    (20): Linear(in_features=512, out_features=26, bias=True)
  )
)

Accuracy on test data: 67.9120864868164 %
Average loss on test data: 1.2613356779019038

[INFO] evaluating network...
              precision    recall  f1-score   support

           a       0.90      0.84      0.87       140
           b       0.96      0.94      0.95       140
           c       0.60      0.93      0.73       140
           d       0.60      0.94      0.73       140
           e       0.65      0.94      0.76       140
           f       0.78      0.44      0.56       140
           g       0.63      0.63      0.63       140
           h       0.96      0.88      0.92       140
           i       0.82      0.74      0.78       140
           j       0.50      0.22      0.31       140
           k       0.80      0.79      0.79       140
           l       0.94      0.86      0.90       140
           m       0.74      0.94      0.83       140
           n       0.76      0.39      0.52       140
           o       0.95      0.28      0.43       140
           p       0.59      0.61      0.60       140
           q       0.47      0.61      0.53       140
           r       0.53      0.51      0.52       140
           s       0.82      0.44      0.57       140
           t       0.92      0.74      0.82       140
           u       0.61      0.71      0.66       140
           v       0.54      0.90      0.67       140
           w       0.62      0.94      0.74       140
           x       0.35      0.36      0.35       140
           y       0.61      0.87      0.72       140
           z       0.72      0.22      0.34       140

    accuracy                           0.68      3640
   macro avg       0.71      0.68      0.66      3640
weighted avg       0.71      0.68      0.66      3640